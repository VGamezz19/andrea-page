{"version":3,"sources":["layout/footer.js","layout/header.js","layout/container.js","routes/CustomBrowserRouter.jsx","InstagramProfile/InstragramProfileFactory.js","services/instagram.js","InstagramProfile/InstagramProfileView.jsx","routes/index.jsx","InstagramProfile/InstagramProfileContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Footer","Header","Container","props","children","RouterContext","React","createContext","CustomBrowserRouter","routeProps","Provider","value","id","description","img","date","Date","width","height","src","url","list","map","caption","images","created_time","generate","text","standard_resolution","dateInt","Number","String","getDate","getMonth","getFullYear","instagram","getImage","a","fetch","then","res","json","data","InstagramProfileView","className","el","Card","key","Img","variant","Body","Text","renderCards","Routes","exact","path","component","Child","useState","setData","useEffect","resImages","aboutList","InstagramProfileFactory","generateList","console","error","getImg","to","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8c787a3.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Footer(){\n\n    return (\n    <div>\n        <p>Footer Here</p>\n    </div>);\n}\n\n","import React from 'react';\n\nexport function Header(){\n\n    return (\n    <div>\n        <p>Header Here</p>\n    </div>);\n}\n\n","import React from 'react';\n\nexport function Container(props){\n\n    return (\n    <div>\n        {props.children}\n    </div>);\n}\n\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nexport const RouterContext = React.createContext({});\n\nconst CustomBrowserRouter = ({ children }) => (\n  <BrowserRouter>\n    <Route>\n      {(routeProps) => (\n        <RouterContext.Provider value={routeProps}>\n          {children}\n        </RouterContext.Provider>\n      )}\n    </Route>\n  </BrowserRouter>\n);\n\nexport default CustomBrowserRouter","function getDate(dateInt) {\n\t\tconst date = new Date(Number(dateInt));\n\t\tdebugger\n    const dd = String(date.getDate())\n    const mm = String(date.getMonth() + 1)\n    const yyyy = date.getFullYear();\n    \n    return dd + '/' + mm + '/' + yyyy;\n}\n\nclass AboutFactory {\n  generate(id, description, img, date = new Date()) {\n\treturn {\n\t\t\tid,\n\t\t\tdescription,\n\t\t\tdate,\n\t\t\timg: {\n\t\t\t\twidth: img.width,\n\t\t\t\theight: img.height,\n\t\t\t\tsrc: img.url\n\t\t\t}\n\t}\n\t}\n\n\t\tgenerateList(list) {\n\t\t\treturn list.map(({id, caption, images, created_time}) => {\n\t\t\t\treturn this.generate(id, caption.text, images.standard_resolution, getDate(created_time))\n\t\t\t})\n     }\n}\n\nexport default new AboutFactory()","const $URL_INSTAGRAM = 'https://api.instagram.com/v1/users/self/media/recent';\nconst $TOKEN = '1446942197.d61509e.88daccb858c44936ae21e4d4455c554b'\n\nexport const instagram = {\n    getImage: async () =>  {\n        try {\n            return fetch(`${$URL_INSTAGRAM}/?access_token=${$TOKEN}`)\n            .then(res => res.json())\n            .then(({data}) => ({res: true, data}))\n        } catch (error) {\n            return {res: false, data: error}\n        }\n        \n    }\n}","import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport './InstagramProfile.scss';\n\nexport function InstagramProfileView({ images }) {\n    return (<div className=\"about-gallery\">\n        {renderCards(images)}\n    </div>)\n\n}\n\nfunction renderCards(images) {\n    return images.map(el => {\n        return (\n            <Card className=\"about-gallery-item\" key={el.id}>\n                <Card.Img className=\"about-gallery-image\" variant=\"top\" {...el.img} />\n                <Card.Body>\n                    <Card.Text>\n                        {el.description}\n                    </Card.Text>\n                </Card.Body>\n                <Card.Footer>\n                    <small className=\"text-muted\">{el.date}</small>\n                </Card.Footer>\n            </Card>\n        );\n    })\n}","import React from 'react';\nimport CustomBrowserRouter from './CustomBrowserRouter';\nimport {\n    Route,\n    Switch,\n    Redirect\n} from 'react-router-dom'\n\nimport { InstagramProfile, InstagramProfileView } from '../InstagramProfile';\n\nexport default function Routes() {\n    return (\n        <CustomBrowserRouter>\n            <Switch>\n                <Route exact path=\"/\" component={InstagramProfile(InstagramProfileView)} />\n                <Redirect to=\"/\" />\n            </Switch>\n        </CustomBrowserRouter>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport InstagramProfileFactory from './InstragramProfileFactory';\nimport { instagram } from '../services';\n\nexport function InstagramProfile(Child) {\n\treturn function Container() {\n\t\tconst [data, setData] = useState([])\n\n\t\tuseEffect(() => {\n\t\t\tasync function getImg() {\n\t\t\t\tconst resImages = await instagram.getImage();\n\n\t\t\t\tif (!resImages.res) {\n\t\t\t\t\tconsole.error(resImages.data);\n\t\t\t\t} else {\n\t\t\t\t\tconst aboutList = InstagramProfileFactory.generateList(resImages.data)\n\t\t\t\t\tsetData(aboutList)\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetImg()\n\t\t}, [])\n\n\t\treturn <Child images={data} />\n\t}\n}\n","import React from 'react';\n\nimport { Header, Container, Footer } from './layout';\nimport Routes from './routes';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Container>\n        <Routes />\n      </Container>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-bootstrap/dist/react-bootstrap';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}